package MST;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class MSTTest {
    static double distance(double[] xyA, double xyB[]) {
        return Math.sqrt((xyA[0] - xyB[0]) * (xyA[0] - xyB[0]) + (xyA[1] - xyB[1]) * (xyA[1] - xyB[1]));
    }

    @Test
    public void Test1() {
        // https://www.nowcoder.com/practice/41b14b4cd0e5448fb071743e504063cf
        MST<Integer> graph1 = new Prim<>();
        MST<Integer> graph2 = new Kruskal<>();
        double[][] xy = { { -46, 51 }, { 27, 96 }, { -82, 56 }, { -19, -28 }, { -3, 19 }, { 63, -25 }, { -20, -16 },
                { -67, 79 }, { -62, 7 }, { -43, -95 }, { 11, 97 }, { 100, 9 }, { 17, -94 }, { 75, -89 }, { -31, -74 },
                { -93, 34 }, { -85, -36 }, { -7, -28 }, { -90, -41 }, { -81, 7 }, { 7, -44 }, { -64, 28 }, { -29, 47 },
                { 57, 19 }, { 15, -65 }, { -50, 56 }, { 68, 72 }, { 14, -82 }, { -86, 98 }, { 42, -25 }, { 76, -33 },
                { -21, -98 }, { 70, 27 }, { 32, 25 }, { -3, -60 }, { 58, -90 }, { 32, 44 }, { 13, 84 }, { -41, -55 },
                { -91, -7 }, { 65, -45 }, { -76, 10 }, { -18, 57 }, { 35, 95 }, { -70, -90 }, { -33, -1 }, { 17, 93 },
                { 69, -25 }, { -40, 78 }, { 98, 53 }, { 99, -20 }, { -14, -70 }, { -43, 11 }, { -71, -80 }, { 24, -77 },
                { -9, 83 }, { 59, -51 }, { 97, 10 }, { 0, -90 }, { -59, -60 }, { -16, 76 }, { -16, 46 }, { 30, -81 },
                { -77, 62 }, { 85, -66 }, { 70, 62 }, { -77, -50 }, { 15, 29 }, { -39, -63 }, { -36, -65 }, { 30, -37 },
                { 59, 77 }, { -60, -43 }, { -99, 98 }, { 62, 91 }, { 84, -88 }, { 57, 50 }, { 52, -36 }, { -75, 50 },
                { -91, -56 }, { -68, 63 }, { -68, 32 }, { -99, 82 }, { -21, -17 }, { 30, -45 }, { 20, -7 }, { -21, 73 },
                { -69, -48 }, { -13, 62 }, { -75, -81 }, { -71, 25 }, { -99, -15 }, { 33, -94 }, { -48, -77 } };
        for (int i = 0; i < xy.length - 1; i++) {
            for (int j = i + 1; j < xy.length; j++) {
                graph1.addEdge(i, j, distance(xy[i], xy[j]));
                graph2.addEdge(i, j, distance(xy[i], xy[j]));
            }
        }
        System.err.println("asd");
        assertEquals(1365.67, graph1.getMST(), 0.01);
        assertEquals(1365.67, graph2.getMST(), 0.01);
        assertEquals(graph1.getMST(), graph2.getMST(), 1e-8);
    }
}
